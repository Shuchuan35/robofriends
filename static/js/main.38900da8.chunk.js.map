{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constains.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","id","name","email","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","components_Card","key","SearchBox","search","handleChange","type","placeholder","value","onChange","Scroll","props","style","overflowY","border","height","children","App","state","_this2","this","fetch","then","res","json","setState","_this$props","searchInput","filterRobots","filter","x","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","connect","dispatch","e","payload","target","Boolean","window","location","hostname","match","initialState","logger","createLogger","store","createStore","arguments","undefined","action","Object","assign","applyMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.38900da8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robos' src={`https://robohash.org/${id}?100x100`}></img>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map(user => (\r\n                    <Card\r\n                        key={user.id} \r\n                        id={user.id} \r\n                        name={user.name} \r\n                        email={user.email}\r\n                    />\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({search, handleChange}) => {\r\n    return (\r\n        <div>\r\n            <input className='pa2 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='search a robot'\r\n                name='search'\r\n                value={search}\r\n                onChange={handleChange}>\r\n            </input>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = props => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\nimport { setSearchField } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchInput: state.searchInput\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        handleChange: e => dispatch(setSearchField(e.target.value))\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    state = {\r\n        robots: []\r\n    }\r\n\r\n    // handleChange = e => {\r\n    //     const { name, value } = e.target;\r\n    //     this.setState({ [name]: value });\r\n    // }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(res => res.json())\r\n            .then(user => this.setState({ robots: user }));\r\n    }\r\n    render() {\r\n        const { robots } = this.state;\r\n        const { searchInput, handleChange } = this.props;\r\n        const filterRobots = robots.filter(x => (\r\n            x.name.toLowerCase().includes(searchInput.toLowerCase())\r\n        ));\r\n        return !robots.length?\r\n        (<h1>Loading...</h1>)\r\n        : (\r\n            <div className='tc'>\r\n                <h1 className='f2'>RoboFriends</h1>\r\n                <SearchBox\r\n                    search={searchInput}\r\n                    handleChange={handleChange}\r\n                />\r\n                <Scroll>\r\n                    <CardList robots={filterRobots} />\r\n                </Scroll>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD} from './constains';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCH_FIELD } from './constains';\r\n\r\nconst initialState = {\r\n    searchInput: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialState, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchInput: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst store = createStore(searchRobots, applyMiddleware(logger));\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}